@page "/pos"
@page "/pos/customers"
@page "/pos/reciepts"
@page "/pos/reports"
@page "/pos/sync"

@if (isAfterLoaded == true)
{
    <div class="left-sidebar">
        <LeftPanel OnChangeTab="ChangeTab" activeTab="activeTab"></LeftPanel>
    </div>
    @if (activeTab == 1)
    {
        <GM.Store.Client.Pages.POS.Receipt></GM.Store.Client.Pages.POS.Receipt>
    }
    else if (activeTab == 2)
    {
        <GM.Store.Client.Pages.POS.ReceiptLog></GM.Store.Client.Pages.POS.ReceiptLog>
    }
    else if (activeTab == 3)
    {
       <GM.Store.Client.Pages.POS.User></GM.Store.Client.Pages.POS.User>
    }
    else if (activeTab == 4)
    {
        <GM.Store.Client.Pages.POS.Sync></GM.Store.Client.Pages.POS.Sync>
    }
}

@code {
    public int activeTab { get; set; } = 1;
    private LeftPanel leftPanel { get; set; }
    protected BusinessModel businessModel;
    protected bool isAfterLoaded;
    protected override async Task OnInitializedAsync()
    {
        var relativeUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri).ToLower();
        if (relativeUrl=="pos/reciepts"||relativeUrl=="pos")
            activeTab = 1;
        else if (relativeUrl=="pos/reports")
            activeTab = 2;
        else if (relativeUrl=="pos/customers")
            activeTab = 3;
        else if (relativeUrl=="pos/sync")
            activeTab = 4;
        StateHasChanged();
        businessModel = await this.localStorage.GetItemAsync<BusinessModel>("storeDetails", null);
        isAfterLoaded = true;
        StateHasChanged();
    }
    public async Task ChangeTab(PosNavigationModel model)
    {
        this.NavigationManager.NavigateTo(model.Url, false, true);
        this.activeTab = model.TabId;
        StateHasChanged();
    }
}
