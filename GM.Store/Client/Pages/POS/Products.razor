@using Radzen;
@using Radzen.Blazor;
<link href="_content/Radzen.Blazor/css/standard.css" rel="stylesheet">
<div class="content-with-right-panel" style="right:0">
    <div class="flex items-center justify-between pos-top-search-area">
        <h2 class="mb-0 font-medium">Products</h2>
        <div class="flex justify-center">
            <div class="xl:w-96">
                <div class="input-group relative flex flex-wrap items-stretch w-full rounded">
                    <RadzenTextBox placeholder="Search" class="form-control" @bind-Value=@model.Keyword Change=@(args => SearchFilter(args)) />
                    @*<input type="text" class="form-control" placeholder="Search" aria-label="Search" aria-describedby="button-addon2">*@
                    <span class="input-group-text flex items-center px-3 py-1.5 text-base font-normal text-gray-700 text-center whitespace-nowrap rounded" id="basic-addon2">
                        <svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="search" class="w-4" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                            <path fill="currentColor" d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"></path>
                        </svg>
                    </span>
                </div>
            </div>
        </div>
    </div>
    <div class="product-list-wrap-pos order-history-top" id="product-list">
        <div class="row px-3 pb-3 justify-between">
            <div class="d-flex">
                <RadzenDropDown TValue="int" Placeholder="Select list" @bind-Value=@SelectedBaseCategoryId Class="w-100 mr-2" Data=@(BaseCategory.Select(a=>new { Title = a.Title, Id = a.Id }).ToList()) TextProperty="Title" ValueProperty="Id" Change=@(args => SelectBaseCategory(args)) />
                <a class="btn btn-third my-auto" @onclick="ModalOpen" href="javascript:void(0)">Import </a>
            </div>
            @if (@selectedProducts?.Count() > 0)
            {
                 <div class="d-flex">
                    <label class="rz-paginator-summary pr-0 my-auto">@(selectedProducts?.Count()>0? $"{selectedProducts.Count()} items on this page are selected.":"") @(PendingSyncCount>0?$"{PendingSyncCount} sync pending.":"") </label>
                    <a class="btn btn-third ml-2 my-auto" @onclick="OpenSyncModal" href="javascript:void(0)">Sync Now</a>
                </div>
            }
        </div>

        <RadzenDataGrid @ref="productGrid" AllowRowSelectOnRowClick="@allowRowSelectOnRowClick" style="height:720px" IsLoading=@isLoading Count="@count" Data="@products" LoadData="@LoadData" AllowPaging="true" PageSize="50" PagerHorizontalAlign="HorizontalAlign.Center"
                        TItem="ProductModel" ColumnWidth="200px" ShowPagingSummary="true" @bind-Value=@selectedProducts SelectionMode="DataGridSelectionMode.Multiple">
            <EmptyTemplate>
                <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No records to display.</p>
            </EmptyTemplate>
            <Columns>
                <RadzenDataGridColumn TItem="ProductModel" Width="60px" Sortable="false" Filterable="false">
                    <HeaderTemplate>
                        <RadzenCheckBox TriState="false" TValue="bool" Value="@(products.Any(i => selectedProducts != null && selectedProducts.Contains(i)))" Change="@(args => selectedProducts = args ? products.ToList() : null)" />
                    </HeaderTemplate>
                    <Template Context="product">
                        <RadzenCheckBox TriState="false" Value="@(selectedProducts != null && selectedProducts.Contains(product))" TValue="bool" Change=@(args => { if(!allowRowSelectOnRowClick) { productGrid.SelectRow(product); }}) />
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductModel" Property="Name" Title="Name">
                    <EditTemplate Context="product">
                        <RadzenTextBox @bind-Value="product.Name" Style="width:100%; display: block" Name="Name" />
                        <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductModel" Property="Description" Title="Description">
                    <EditTemplate Context="product">
                        <RadzenTextBox @bind-Value="product.Description" Style="width:100%; display: block" Name="Description" />
                        <RadzenRequiredValidator Text="Description is required" Component="Description" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductModel" Property="Amount" Title="Amount">
                    <Template Context="product"><strong>@($"{businessModel.BusinessCurrencySymbol}{string.Format("{0:n2}", product.Amount)}")</strong></Template>
                    <EditTemplate Context="product">
                        <RadzenNumeric TValue="Nullable<double>" Format="0.00" @bind-Value="product.Amount" Style="width:100%; display: block" Name="Amount" />
                        <RadzenRequiredValidator Text="Amount is required" Component="SellingPrice" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductModel" Property="SellingPrice" Title="SellingPrice">
                    <Template Context="product"><strong>@($"{businessModel.BusinessCurrencySymbol}{string.Format("{0:n2}", product.SellingPrice)}")</strong></Template>
                    <EditTemplate Context="product">
                        <RadzenNumeric TValue="Nullable<double>" Format="0.00" @bind-Value="product.SellingPrice" Style="width:100%; display: block" Name="SellingPrice" />
                        <RadzenRequiredValidator Text="SellingPrice is required" Component="SellingPrice" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductModel" Property="Stock" Title="Stock" Width="100px">
                    <EditTemplate Context="product">
                        <RadzenNumeric @bind-Value="product.Stock" Style="width:100%; display: block" Name="Stock" />
                        <RadzenRequiredValidator Text="Stock is required" Component="Stock" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="ProductModel" Title="Image" Width="100px">
                    <Template Context="product"> <RadzenImage Path="@product.ImageUrl" style="width: 40px; height: 40px; border-radius: 8px;" /></Template>
                    <EditTemplate Context="product">
                        <RadzenUpload Url="@($"api/product/uploadimage/{product.LocalId}")" Accept="image/*" Icon="upload" ChooseText="" Progress=@(args => OnImageProgress(args, product.LocalId))></RadzenUpload>
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="ProductModel" Context="product" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="80px">
                    <Template Context="product">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(product))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        @*  <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(product))" @onclick:stopPropagation="true">
                        </RadzenButton>*@
                    </Template>
                    <EditTemplate Context="product">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(product))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@((args) => CancelEdit(product))">
                        </RadzenButton>
                        @*  <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => DeleteRow(product))">
                        </RadzenButton>*@
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>
@*<OrderSummary @ref="orderSummary" OnorderSummaryClose="OrderDetailsClose"></OrderSummary>*@
@if (showModal)
{
    <div class="modal fade fixed top-0 left-0 hidden w-full h-full outline-none overflow-x-hidden overflow-y-auto show" style="display:block;" id="add-customer" tabindex="-1" aria-labelledby="add-customerTitle" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered relative w-auto pointer-events-none">
            <div class="modal-content border-none shadow-lg relative flex flex-col w-full pointer-events-auto bg-white bg-clip-padding rounded-md outline-none text-current">
                <div class="modal-header flex flex-shrink-0 items-center justify-between p-4 border-b border-gray-200 rounded-t-md">
                    <h5 class="text-xl font-medium leading-normal text-gray-800" id="exampleModalScrollableLabel">
                        Import data from Excel
                    </h5>
                    <button type="button" @onclick="CloseModal" class="btn-close box-content w-4 h-4 p-1 text-black border-none rounded-none opacity-50 focus:shadow-none focus:outline-none focus:opacity-100 hover:text-black hover:opacity-75 hover:no-underline"
                        data-bs-dismiss="modal" aria-label="Close">
                    </button>
                </div>
                @if (productImportResponse != null && productImportResponse.IsProcessComplete)
                {
                    <div class="modal-body relative p-4">
                        @if (productImportResponse.SuccessCount > 0)
                        {
                            <div class="alert alert-success p-2"><strong>Success!</strong> @productImportResponse.SuccessCount products uploaded successfuly.</div>
                        }
                        @if (productImportResponse.FailedCount > 0)
                        {
                            <div class="alert alert-danger p-2"><strong>Failed!</strong> @productImportResponse.FailedCount products upload failed.</div>
                        }
                    </div>
                    <div class="modal-footer flex flex-shrink-0 flex-wrap items-center justify-end p-4 border-t border-gray-200 rounded-b-md">
                        <button type="button" @onclick="CloseModal" class="cancel-button ml-2">Close</button>
                    </div>
                }
                else
                {
                    <EditForm Model="model" OnValidSubmit="OnSubmit">
                        <div class="modal-body relative p-4">
                            <div class="w-full mb-4">
                                <InputFile class="font-medium border-b form-input w-full" OnChange="OnInputFileChange" />
                            </div>
                            @if (uploadLoader == 1)
                            {
                                <div class="alert alert-success p-2"><strong>Success!</strong> File uploaded completed.</div>
                            }
                            else if (uploadLoader == 2)
                            {
                                <div class="alert alert-warning p-2"><strong>Loading!</strong> Upload on progress.</div>
                            }
                        <a href="SampleExcel/ProductImportSample.xlsx">Download Sample</a>
                        </div>
                        <div class="modal-footer flex flex-shrink-0 flex-wrap items-center justify-end p-4 border-t border-gray-200 rounded-b-md">
                            <button type="submit" class="btn-green">
                                Import
                                @if (uploadLoader == 2)
                                {
                                    <div class="spinner-border text-primary ml-1" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                }
                            </button>
                            <button type="button" @onclick="CloseModal" class="cancel-button ml-2">Cancel</button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
@if (showSyncModal)
{
    <div class="modal fade fixed top-0 left-0 hidden w-full h-full outline-none overflow-x-hidden overflow-y-auto show" style="display:block;" id="add-customer" tabindex="-1" aria-labelledby="add-customerTitle" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered relative w-auto pointer-events-none">
            <div class="modal-content border-none shadow-lg relative flex flex-col w-full pointer-events-auto bg-white bg-clip-padding rounded-md outline-none text-current">
                <div class="modal-header flex flex-shrink-0 items-center justify-between p-4 border-b border-gray-200 rounded-t-md">
                    <h5 class="text-xl font-medium leading-normal text-gray-800" id="exampleModalScrollableLabel">
                        Sync data
                    </h5>
                    <button type="button" @onclick="CloseSyncModal" class="btn-close box-content w-4 h-4 p-1 text-black border-none rounded-none opacity-50 focus:shadow-none focus:outline-none focus:opacity-100 hover:text-black hover:opacity-75 hover:no-underline"
                        data-bs-dismiss="modal" aria-label="Close">
                    </button>
                </div>
                @if (isSyncComplete)
                {
                    <div class="modal-body relative p-4">
                        @if (isSyncLoading)
                        {
                            <div class="alert alert-warning p-2"><strong>Loading!</strong> Sync on progress.</div>
                        }
                        @if (SyncSuccessCount > 0)
                        {
                            <div class="alert alert-success p-2"><strong>Success!</strong> @SyncSuccessCount products sync successfuly.</div>
                        }
                        @if (SyncFailedCount > 0)
                        {
                            <div class="alert alert-danger p-2"><strong>Failed!</strong> @SyncFailedCount products sync failed.</div>
                        }
                        @if (SyncErrorMessage != null && SyncErrorMessage != "")
                        {
                            <div class="alert alert-warning p-2"><strong>Failed!</strong> File Upload failed.</div>
                        }
                    </div>
                    <div class="modal-footer flex flex-shrink-0 flex-wrap items-center justify-end p-4 border-t border-gray-200 rounded-b-md">
                        <button type="button" @onclick="CloseSyncModal" class="cancel-button ml-2">Close</button>
                    </div>
                }
                else
                {
                    <div class="modal-body relative p-4">
                        <p class="my-2 text-sm text-dark-2"> @string.Format("Are you sure you want to sync {0} products?", selectedProducts?.Count())</p>
                        @if (isSyncLoading)
                        {
                            <div class="alert alert-warning p-2"><strong>Loading!</strong> Sync on progress.</div>
                        }
                    </div>
                    <div class="modal-footer flex flex-shrink-0 flex-wrap items-center justify-end p-4 border-t border-gray-200 rounded-b-md">
                        <button type="submit" class="btn-green" @onclick="SyncNow">
                            Sync Now
                            @if (isSyncLoading)
                            {
                                <div class="spinner-border text-primary ml-1" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                        </button>
                        <button type="button" @onclick="CloseSyncModal" class="cancel-button ml-2">Cancel</button>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}
@code {
    bool allowRowSelectOnRowClick = false;
}